---
- hosts: all
  tasks:
    - name: create libvirt config dir
      become: true
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        setype: "{{ item.setype | default('container_file_t') }}"
        owner: "{{ item.owner | default(ansible_user) }}"
        group: "{{ item.group | default(ansible_user) }}"
        mode: "{{ item.mode | default(omit) }}"
        recurse: true
      with_items:
      - { "path": /var/lib/openstack/config/libvirt}
      - { "path": /var/lib/openstack/config/containers}
      - { 'path': /var/lib/nova}
      - { "path": /etc/tmpfiles.d/, "owner": "root", "group": "root"}
    - name: ensure /var/run/libvirt is present upon reboot
      become: true
      ansible.builtin.copy:
            dest: /etc/tmpfiles.d/run-libvirt.conf
            content: |
              d /run/libvirt 0755 root root - -
    - name: create tempfiles
      become: true
      command: systemd-tmpfiles --create
    - name: create persistent directories
      become: true
      file:
        path: "{{ item.path }}"
        setype: "{{ item.setype | default('container_file_t') }}"
        state: directory
        owner: "{{ item.owner | default(ansible_user) }}"
        group: "{{ item.group | default(ansible_user) }}"
        mode: "{{ item.mode | default(omit) }}"
      with_items:
      - { "path": /var/lib/libvirt}
      - { "path": /var/log/containers/libvirt, "mode": "0750" }
      - { "path": /var/log/containers/stdouts, "mode": "0750" }
      # we could proably just assume tha this has been precreated by the dataplane operator.
      - { "path": /etc/ceph, "mode": "0750", "owner": "root", "group": "root"}
    - name: Copy generated nova configs
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('640') }}"
      with_items:
      - { "src": "/var/lib/openstack/config/libvirt_virtlogd__virtlogd.conf",
          "dest": "/var/lib/openstack/config/libvirt/virtlogd.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtlogd__libvirt_virtlogd.json",
          "dest": "/var/lib/openstack/config/containers/libvirt_virtlogd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtlogd__libvirt-virtlogd.json",
          "dest": "/var/lib/openstack/config/libvirt/libvirt-virtlogd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtproxyd__virtproxyd.conf",
          "dest": "/var/lib/openstack/config/libvirt/virtproxyd.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtproxyd__libvirt_virtproxyd.json",
          "dest": "/var/lib/openstack/config/containers/libvirt_virtproxyd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtproxyd__libvirt-virtproxyd.json",
          "dest": "/var/lib/openstack/config/libvirt/libvirt-virtproxyd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtnodedevd__virtnodedevd.conf",
          "dest": "/var/lib/openstack/config/libvirt/virtnodedevd.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtnodedevd__libvirt_virtnodedevd.json",
          "dest": "/var/lib/openstack/config/containers/libvirt_virtnodedevd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtnodedevd__libvirt-virtnodedevd.json",
          "dest": "/var/lib/openstack/config/libvirt/libvirt-virtnodedevd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtqemud__virtqemud.conf",
          "dest": "/var/lib/openstack/config/libvirt/virtqemud.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtqemud__libvirt_virtqemud.json",
          "dest": "/var/lib/openstack/config/containers/libvirt_virtqemud.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtqemud__libvirt-virtqemud.json",
          "dest": "/var/lib/openstack/config/libvirt/libvirt-virtqemud.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtqemud__qemu.conf",
          "dest": "/var/lib/openstack/config/libvirt/qemu.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtsecretd__virtsecretd.conf",
          "dest": "/var/lib/openstack/config/libvirt/virtsecretd.conf"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtsecretd__libvirt_virtsecretd.json",
          "dest": "/var/lib/openstack/config/containers/libvirt_virtsecretd.json"
        }
      - { "src": "/var/lib/openstack/config/libvirt_virtsecretd__libvirt-virtsecretd.json",
          "dest": "/var/lib/openstack/config/libvirt/libvirt-virtsecretd.json"
        }
    - name: deploy nova container
      ansible.builtin.include_role:
        name: osp.edpm.edpm_container_manage
      vars:
        edpm_container_manage_config: "/var/lib/openstack/config/containers"
        edpm_container_manage_healthcheck_disabled: true
        edpm_container_manage_debug: true
        edpm_container_manage_config_patterns: "libvirt*.json"
        edpm_container_manage_clean_orphans: false
    - name: update ceph libvirt secret
      become: true
      shell: |
        CLUSTERS=( $(ls /etc/ceph/*.conf | xargs -I {} basename  -s .conf {} ) )
        declare -A CLUSTER_USER_MAP=()
        for cluster in ${CLUSTERS[@]}; do CLUSTER_USER_MAP[${cluster}]=$(ls /etc/ceph/${cluster}.client.*.keyring | grep -v admin | awk -F . '{print $3}'); done
        declare -A CLUSTER_FSID_MAP=()
        for cluster in ${CLUSTERS[@]}; do CLUSTER_FSID_MAP[${cluster}]=$(awk -F '=' '/fsid/ {print $2}' /etc/ceph/${cluster}.conf| xargs); done
        for cluster in ${CLUSTERS[@]}; do
        cat <<EOF | tee secret.xml>/dev/null
        <secret ephemeral='no' private='no'>
        <uuid>${CLUSTER_FSID_MAP[${cluster}]}</uuid>
        <usage type='ceph'>
            <name>${cluster}.client.${CLUSTER_USER_MAP[$cluster]} secret</name>
        </usage>
        </secret>
        EOF
        podman cp secret.xml libvirt_virtqemud:/tmp/secret.xml
        rm -f secret.xml
        podman exec libvirt_virtqemud bash -c "virsh secret-undefine ${CLUSTER_FSID_MAP[${cluster}]}"
        podman exec libvirt_virtqemud bash -c "virsh secret-define --file /tmp/secret.xml; rm -f /tmp/secret.xml"
        keyring=$(awk '$1 == "key" {print $3}' /etc/ceph/${cluster}.client.${CLUSTER_USER_MAP[$cluster]}.keyring)
        podman exec libvirt_virtqemud bash -c "virsh secret-set-value ${CLUSTER_FSID_MAP[${cluster}]} --base64 ${keyring}"
        done
    - name: restart libvirt containers
      become: true
      ansible.builtin.systemd:
        state: restarted
        name: "{{item.name}}"
      with_items:
        - {"name": "edpm_libvirt_virtlogd.service"}
        - {"name": "edpm_libvirt_virtnodedevd.service"}
        - {"name": "edpm_libvirt_virtproxyd.service"}
        - {"name": "edpm_libvirt_virtqemud.service"}
        - {"name": "edpm_libvirt_virtsecretd.service"}
